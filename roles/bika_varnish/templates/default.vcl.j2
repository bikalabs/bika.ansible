vcl 4.0;

### Debugging Varnish
#
# Uncomment to use Logging, e.g: std.log("Log Message");
# import std;
#
# Show logs on the Server:
# varnishlog -i VCL_Log
#
# Example:
# std.log("Cookies: " + req.http.Cookie);
###

# This is a BIKA VCL configuration file for varnish.
# http://docs.plone.org/manage/deploying/caching/varnish4.html
backend default {
    .host = "{{ varnish_default_backend_host }}";
    .port = "{{ varnish_default_backend_port }}";

    .first_byte_timeout = 300s; # time to wait for the first byte from the backend
    .connect_timeout = 300s; # time to wait for a backend connection
    .between_bytes_timeout = 300s; # time to wait between each received byte
}

# For now, we'll only allow purges coming from localhost
acl purge {
    "127.0.0.1";
    "localhost";
}

sub vcl_recv {

    # Allow PURGE requests clearing everything
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return(synth(405, "Not allowed."));
        }
        return (purge);
    }

    # NB: No Cookie sanitization at the moment, as Bika LIMS maintains currently too many Cookies, which can not be matched easily.
    # See: https://github.com/bikalabs/bika.lims/issues/#2082
    # if (req.http.Cookie) {
    #     set req.http.Cookie = ";" + req.http.Cookie;
    #     set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    #     set req.http.Cookie = regsuball(req.http.Cookie, ";(bika.graphite.disabled)=", "; \1=");
    #     set req.http.Cookie = regsuball(req.http.Cookie, ";(statusmessages|__ac|_ZopeId|__cp)=", "; \1=");
    #     set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    #     set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");
    #
    #     if (req.http.Cookie == "") {
    #         unset req.http.Cookie;
    #     }
    # }

    if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "DELETE") {
        /* Non-RFC2616 or CONNECT which is weird. */
        return (pipe);
    }
    if (req.method != "GET" && req.method != "HEAD") {
        /* We only deal with GET and HEAD by default */
        return (pass);
    }
    if (req.http.Authorization || req.http.Cookie) {
        /* Not cacheable by default */
        return (pass);
    }
    return (hash);
}

sub vcl_hash {
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    return (lookup);
}

sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Varnish = "Cache HIT (" + obj.hits + " times)";
    } else {
        set resp.http.X-Varnish = "Cache MISS :(";
    }

    if ((req.http.X-UA-Device) && (resp.http.Vary)) {
        set resp.http.Vary = regsub(resp.http.Vary, "X-UA-Device", "User-Agent");
    }
    return (deliver);
}

sub vcl_synth {
    set resp.http.Content-Type = "text/html; charset=utf-8";
    set resp.http.Retry-After = "5";

    synthetic( {"
        <?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
        <html>
          <head>
            <title>BIKA Error: "} + resp.status + " " + resp.reason + {"</title>
          </head>
          <body>
            <h1>Error "} + resp.status + " " + resp.reason + {"</h1>
            <p>"} + resp.reason + {"</p>
            <h3>BIKA Meditation:</h3>
            <p>XID: "} + req.xid + {"</p>
            <hr>
            <p>BIKA Varnish Cache Server</p>
          </body>
        </html>
    "} );

    return (deliver);
}
